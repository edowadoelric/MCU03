#include "global.h"

/*----function define---------------------------------------------------------*/
//void vUart1_Init(void);
void vUSART1_Send_String(uint8_t String[],uint8_t length);
void vDMA_Configuration(uint32_t Memory_Address,uint8_t Buffer_Size);

/*---Struct define------------------------------------------------------------*/
//struct PCtoMCU Com1RxMsg;
struct PCtoMCU* Com1RxPointer;

//struct MCUtoPC Com1TxMsg;
unsigned char* Com1TxPointer = (unsigned char*)&Com1TxMsg;

/*----Queue Handle------------------------------------------------------------*/
//xQueueHandle PCtoUart1_Queue;
//xQueueHandle Uart1toParam_Queue;
//xQueueHandle Uart1toPC_Queue;

/*----Task--------------------------------------------------------------------*/
void vUart_AnalysisMessage(void *pvParameters);
void vUart1_DebugOutput(void *pvParameters);

/*----private variables-------------------------------------------------------*/
uint8_t RxData[50]={'\0'};              //受信バッファ
uint8_t TxData[20]={0};                 //送信バッファ
uint8_t CheckSum =0;                    //送信時のチェックサム
uint8_t SizeofTxStruct = 0;             //構造体の大きさ
uint8_t RxCount=0;                      //受信カウント
uint8_t StartPoint=0;                   //パケットのスタートアドレス
uint8_t EndPoint=0;                     //パケットのエンドアドレス
uint8_t GetMessage[] = "Recieve\n";     //返答
uint8_t ErrorMessage[] = "Error\n";     //返答

/*-------- uart1設定関数----------------------------------------------------*/
void vUart1_Init(void)
{
  NVIC_InitTypeDef NVIC_InitStructure;
  GPIO_InitTypeDef GPIO_InitStructure;
  USART_InitTypeDef USART_InitStructure;
  
  /* Enable USART1 clock */
  RCC_APB2PeriphClockCmd( RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA, ENABLE );	
  
  /* Enable DMA clocks */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
  
  /* Enable USART1 IRQ Channel */
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_KERNEL_INTERRUPT_PRIORITY;    //システムコール(11)よりも優先度を下げる :12
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
  
  /* Configure USART1 Tx as alternate function push-pull */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init(GPIOA, &GPIO_InitStructure);

  /* Configure USART1 Rx as input floating */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 
  /* Configure USART1 parameter*/
  USART_DeInit(USART1);
  USART_InitStructure.USART_BaudRate = 115200;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No ;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  USART_Init(USART1, &USART_InitStructure);
  
  /* Enable USART1 RX interrupt */
  USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
  
  /* Enable USART1 DMA TX request */
  USART_DMACmd(USART1, USART_DMAReq_Tx, ENABLE);
  
  /* Enable the USART1 */
  USART_Cmd(USART1, ENABLE);
  
  /*Clear USART1 RX interrupt flag*/
  USART_ClearITPendingBit(USART1, USART_IT_RXNE);
  
  //構造体の初期化
  Com1TxMsg.Command =1;
  Com1TxMsg.Length = 7;
  Com1TxMsg.CompleteFlag = 0;
  Com1TxMsg.EncoderLeft =0;
  Com1TxMsg.EncoderRight = 0;
  Com1TxMsg.dumm = 0;
  
  //SizeofTxStruct = Com1TxMsg.Length+1;
  SizeofTxStruct = sizeof(Com1TxMsg);
  
  /*タスク生成*/
  xTaskCreate( vUart_AnalysisMessage, "Uart1_Task1", 128, NULL, 1, NULL);
  xTaskCreate( vUart1_DebugOutput, "Uart1_Task2", 128, NULL, 1, NULL);
  
  /*Queue生成*/
  Uart1toPC_Queue = xQueueCreate(20, 2*20*sizeof( uint8_t ));
  
}  
	
/* UART1のDMAを使用したメッセージ送付-----------------------------------------*/
void vUSART1_Send_String(uint8_t String[],uint8_t length)
{

  vDMA_Configuration((uint32_t)String, length);

  /* Enable USARTy DMA TX Channel */
  DMA_Cmd(DMA1_Channel4, ENABLE);

}

/*------DMAで文字転送をするので、初期設定とは独立して宣言させている-----------*/
void vDMA_Configuration(uint32_t Memory_Address, uint8_t Buffer_Size)
{
  DMA_InitTypeDef DMA_InitStructure;

  /* DMA channel for USART1 (DMA1_Channel4) Config */
  DMA_DeInit(DMA1_Channel4);
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&USART1->DR;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)Memory_Address;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
  DMA_InitStructure.DMA_BufferSize = Buffer_Size;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
  DMA_Init(DMA1_Channel4, &DMA_InitStructure);
}

/* ----USART1受信割り込み-----------------------------------------------------*/
void USART1_IRQHandler(void)
{
  portBASE_TYPE xHigherPriorityTaskWoken;
  xHigherPriorityTaskWoken = pdFALSE;
  
  if(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == SET){
    
    //文字の受信  
    RxData[RxCount] = USART_ReceiveData( USART1 );
    
    RxCount++;
  }
  else{}
   
  portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
  
}

/*-----ここからタスク---------------------------------------------------------*/

/* PCから受信したパラメータを解析するタスク-----------------------------------*/

void vUart_AnalysisMessage(void *pvParameters)
{    
  uint8_t RxTimeOut = 0;
  uint8_t CheckSum =0;
  
  while(1){     //Task
    
    if(RxCount >= 20){
      
      //Calculation checksum
      CheckSum =0;
      for(int i=0; i<RxData[3]+1; i++){
        CheckSum += RxData[2+i];
      }
      //Add CheckSum
      CheckSum = ~CheckSum;
      
      if( (RxData[0] == 0xff) & (RxData[1] == 0xff) & RxData[RxData[3]+3] == CheckSum){

        //Command1
        if(RxData[2] == 0x02){
          
          //store Rx data
          Com1RxPointer = (struct PCtoMCU*)&RxData[2];
          
          Com1RxMsg.Length =            Com1RxPointer->Length;
          Com1RxMsg.Command =           Com1RxPointer->Command;
          Com1RxMsg.MotorLeftPwm =      Com1RxPointer->MotorLeftPwm;
          Com1RxMsg.MotorRightPwm =     Com1RxPointer->MotorRightPwm;
          Com1RxMsg.Distance =          Com1RxPointer->Distance;
          Com1RxMsg.Angle =             Com1RxPointer->Angle;
          
          RxTimeOut=0;
          
          //Send Tx data
          //Add Header
          TxData[0] = 0xff;
          TxData[1] = 0xff;
	
          CheckSum =0;
          
          //Calculation checksum
          for(int i=0; i<SizeofTxStruct; i++){
            CheckSum += Com1TxPointer[i];
            TxData[2+i] = Com1TxPointer[i];
          }
	
          //Add CheckSum
          TxData[2+SizeofTxStruct] = ~CheckSum;
	
          //Send Txdata (Const 20 byte)
          xQueueSendToBack(Uart1toPC_Queue, TxData, portMAX_DELAY);
          
          //tsprintf((char*)TxData, "Get = %x:%x\r\n",Com1RxMsg.Command, CheckSum);

          for(int i=0; i<RxCount ; i++){//Reset
            RxData[i]=0;
          }
          RxCount =0;
        }
        else{        //Reset
          for(int i=0; i<RxCount ; i++){
            RxData[i]=0;
          }
          RxCount =0;
        }
      
      }
      else{     //Reset
          for(int i=0; i<RxCount ; i++){
            RxData[i]=0;
          }
          RxCount =0;
      }
      
    }
    else{}
    
    //TimeOut
    RxTimeOut++;
    
    if(RxTimeOut == 50)
    {
      for(int i=0; i<RxCount ; i++){
            RxData[i]=0;
      }
      RxCount =0;
    }
    
    //Loop Rate(50Hz)
    vTaskDelay(2000);
    
  }
  
}

/* PCから受信したパラメータをメモリに格納 ------------------------------------
void vUart1_WriteToParamTask(void *pvParameters)
{ 
  uint8_t cRxdata[50]={'\0'};
  
  while(1) {  
    
    //受信割り込みからひとまとまりのデータ受信
    
    //Queueがない限りここからTaskはすすまないらしい
    xQueueReceive(PCtoUart1_Queue, cRxdata, portMAX_DELAY);
    
    //成形してパラメータ書き込みTaskに提出
    
    //debug
    xQueueSendToBack(Uart1toPC_Queue, cRxdata, portMAX_DELAY);
    
    vTaskDelay(10);
   
  }
  
}
*/

/* シリアルデバック-----------------------------------------------------------*/
void vUart1_DebugOutput(void *pvParameters)
{
  uint8_t cTxdata[50]={'\0'};
  uint8_t cCount=0;
  
  while(1) {
   
    /* キューからデータ取り出し */
    xQueueReceive(Uart1toPC_Queue, cTxdata, portMAX_DELAY);
    
    //cCount = strlen((char*)cTxdata);
    
    vUSART1_Send_String(cTxdata , 20);  
    
    vTaskDelay(2000);
  }
}
